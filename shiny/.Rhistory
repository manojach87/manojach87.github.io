ENV="PRD"
print(paste('ENV is ', ENV,sep=""))
library(pracma)
library(anomalize)
library(forecast)
library(dplyr)
library(tibble)
# Read data+
library(readxl)
library(lubridate)
library (RODBC)
library(sqldf)
library(ggplot2)
library(imputeTS)
require(pracma)
install.packages("pracma"   )
install.packages("anomalize")
install.packages("forecast" )
install.packages("dplyr"    )
install.packages("tibble"   )
install.packages("readxl"   )
install.packages("lubridate")
install.packages("RODBC"    )
install.packages("sqldf"    )
install.packages("ggplot2"  )
install.packages("imputeTS" )
library(pracma)
library(anomalize)
library(forecast)
library(dplyr)
library(tibble)
# Read data+
library(readxl)
library(lubridate)
library (RODBC)
library(sqldf)
library(ggplot2)
library(imputeTS)
if(ENV=="PRD"){
HOST='PROD'
# USER='$tdwallet(TDPR211_user)'
# PWD='$tdwallet(TDPR211_pw)'
TABLEDB="DLBIQuality"
VIEWDB=TABLEDB
print(paste('Connecting to ', HOST,sep=""))
c<-odbcConnect(HOST, '$tdwallet(TDPR211_user)', '$tdwallet(TDPR211_pw)');
} else if(ENV=="UAT"){
HOST='TD_QA'
# USER="'$tdwallet(CHTRT7_user)'"
# PWD="'$tdwallet(CHTRT7_pw)'"
TABLEDB="XBIDQM"
VIEWDB=paste(TABLEDB,'V',sep='')
print(paste('Connecting to ', HOST,sep=""))
c<-odbcConnect(HOST, '$tdwallet(CHTRT7_user)', '$tdwallet(CHTRT7_pw)');
} else if(ENV=="DEV"){
HOST='TD_DEV'
# USER="'$tdwallet(CHTRT9_user)'"
# PWD="'$tdwallet(CHTRT9_pw)'"
TABLEDB="XBIDQM"
VIEWDB=paste(TABLEDB,'V',sep='')
print(paste('Connecting to ', HOST,sep=""))
c<-odbcConnect(HOST, '$tdwallet(CHTRT9_user)', '$tdwallet(CHTRT9_pw)');
}else{
stop("Environment must be DEV, UAT or PRD).")
}
print(paste('Connection to ', HOST," Successful!",sep=""))
#print(paste(HOST, USER, PWD, TABLEDB, VIEWDB))
if (c == -1) stop(paste("Failed to login to ",))
df=sqlQuery(c,"select a.CalDt as CalDate,
zeroifnull(
case
p.unpivot_id
when 0 then a.Netgain
when 1 then a.Additions
when 2 then a.Acquisitions
when 3 then a.Upgrades
when 4 then a.Reductions
when 5 then a.Downgrade
when 6 then a.MoveTransfer
when 7 then a.Voluntary
when 8 then a.NonPay
end
) Metric
,
case
p.unpivot_id
when 0 then 'Netgain'
when 1 then 'Additions'
when 2 then 'Acquisitions'
when 3 then 'Upgrade'
when 4 then 'Reductions'
when 5 then 'Downgrade'
when 6 then 'Move/Transfer'
when 7 then 'Voluntary'
when 8 then 'Non-Pay'
end MetricDesc
,LgcyCorp
,PSU
,Account_Class
from
(
select
DD.CalDt,DD.CalWeekNum,DD.CalMthNum,org.LgcyCorp,
case
WHEN prd.BlgPrdSumCat in ('Basic Service','Commercial Basic') THEN 'Video'
WHEN prd.BlgPrdSumCat in  ('High Speed Data (Cable Modem)','Commercial CBI') THEN 'Internet'
WHEN prd.BlgPrdSumCat in  ('Telephony Service','Commercial Telephony Service') THEN 'Voice'
end  PSU,
case
WHEN prd.BlgPrdSumCat in ('Basic Service','High Speed Data (Cable Modem)','Telephony Service') THEN 'Resi'
WHEN prd.BlgPrdSumCat in  ('Commercial Basic','Commercial CBI','Commercial Telephony Service') THEN 'SMB'
end  Account_Class,
SUM(Connects) - SUM(Disconnects) Netgain,
SUM(Connects) as Additions,
SUM(CASE WHEN dm.MigCatDesc = 'Connect' THEN Connects ELSE NULL END) Acquisitions,
SUM(CASE WHEN dm.MigCatDesc = 'Upgrade' THEN Connects ELSE NULL END) Upgrades,
SUM(Disconnects) Reductions,
SUM(CASE WHEN dm.MigCatDesc = 'Downgrade' and drr.ExecDiscoRsnCat <> 'Non-Pay' THEN Disconnects ELSE NULL END) Downgrade,
SUM(CASE WHEN dm.MigCatDesc = 'Disconnect' and drr.ExecDiscoRsnCat = 'MOVE/TRANSFER' THEN Disconnects ELSE NULL END) MoveTransfer,
SUM(CASE WHEN dm.MigCatDesc = 'Disconnect' and drr.ExecDiscoRsnCat = 'VOLUNTARY' THEN Disconnects ELSE NULL END) Voluntary,
SUM(CASE WHEN dm.MigCatDesc in ('Disconnect','Downgrade') and drr.ExecDiscoRsnCat = 'NON-PAY' THEN Disconnects ELSE NULL END) NonPay
from XBITblsV.FctBlgAcctSvcSumMigDlyV a11
JOIN xbitblsv.dimdate dd on a11.MigDimDtSk = dd.dimdatesk
JOIN XBITblsV.DimMig dm  ON  a11.DimMigSk = dm.DimMigSk
JOIN XBITblsV.DimRedRsn drr  ON  a11.DimRedRsnSk = drr.DimRedRsnSk
JOIN XBITblsV.DimOrgBlgFTA org  ON  a11.DimOrgBlgFTASk = org.DimOrgBlgFTASk
AND org.DivisionKey <> -1
AND org.IsCurrFl = 1 AND org.RecOpInd IN ('I','U')
AND org.RptActvFl <> 0
JOIN XBITblsV.DimBlgPrdSum prd  ON  a11.DimBlgPrdSumSk = prd.DimBlgPrdSumSk
WHERE 1=1 --org.LgcyCorp in ('TWC')
and DD.CalDt BETWEEN '2018-01-31' and '2020-01-31'
GROUP BY 1,2,3,4,5,6
union all
select
DD.CalDt,DD.CalWeekNum,DD.CalMthNum,org.LgcyCorp,
case
WHEN prd.BlgPrdSumCat in ('Basic Service','Commercial Basic') THEN 'Video'
WHEN prd.BlgPrdSumCat in  ('High Speed Data (Cable Modem)','Commercial CBI') THEN 'Internet'
WHEN prd.BlgPrdSumCat in  ('Telephony Service','Commercial Telephony Service') THEN 'Voice'
end  PSU,
CASE
WHEN prd.blgprdsumcat IN ( 'Basic Service', 'High Speed Data (Cable Modem)', 'Telephony Service' ) THEN 'Residential'
WHEN prd.blgprdsumcat IN ( 'Commercial Basic', 'Commercial CBI', 'Commercial Telephony Service' ) THEN 'SMB'
END    Account_Class,
SUM(SubConnCnt) - SUM(SubDiscoCnt) Netgain,
sum(SubConnCnt) Additions,
SUM(CASE WHEN dm.MigCatDesc = 'Connect' THEN SubConnCnt ELSE NULL END) Acquisitions,
SUM(CASE WHEN dm.MigCatDesc = 'Upgrade' THEN SubConnCnt ELSE NULL END) Upgrades,
SUM(SubDiscoCnt) Reductions,
SUM(CASE WHEN dm.MigCatDesc = 'Downgrade' and drr.ExecDiscoRsnCat <> 'Non-Pay' THEN SubDiscoCnt ELSE NULL END) Downgrade,
SUM(CASE WHEN dm.MigCatDesc = 'Disconnect' and drr.ExecDiscoRsnCat = 'MOVE/TRANSFER' THEN SubDiscoCnt ELSE NULL END) MoveTransfer,
Sum(CASE WHEN dm.MigCatDesc = 'Disconnect' and drr.ExecDiscoRsnCat = 'VOLUNTARY' THEN SubDiscoCnt ELSE NULL END) Voluntary,
SUM(CASE WHEN dm.MigCatDesc in ('Disconnect','Downgrade') and drr.ExecDiscoRsnCat = 'NON-PAY' THEN SubDiscoCnt ELSE NULL END) NonPay
from XBITblsV.FctCBBlgAcctSvcSumMigDlyV a11
JOIN xbitblsv.dimdate dd on a11.MigDimDtSk = dd.dimdatesk
JOIN XBITblsV.DimMig dm  ON  a11.DimMigSk = dm.DimMigSk
JOIN XBITblsV.DimRedRsn drr  ON  a11.DimRedRsnSk = drr.DimRedRsnSk
JOIN XBITblsV.DimOrgBlgFTA org  ON  a11.DimOrgBlgFTASk = org.DimOrgBlgFTASk
AND org.DivisionKey <> -1
AND org.IsCurrFl = 1 AND org.RecOpInd IN ('I','U')
AND org.RptActvFl <> 0
JOIN XBITblsV.DimBlgPrdSum prd  ON  a11.DimBlgPrdSumSk = prd.DimBlgPrdSumSk
WHERE 1=1
AND prd.BlgPrdSumCat in ('Basic Service','Commercial Basic','High Speed Data (Cable Modem)','Commercial CBI','Telephony Service','Commercial Telephony Service')
and CalDt between '2018-01-31' and '2020-01-31'
GROUP BY 1,2,3,4,5,6
)a
join XBIDQMV.DQM_UNPIVOT p on p.unpivot_id <9
order by CalDate
")
distinctAttributes<-distinct(df,
MetricDesc
, LgcyCorp
, PSU
, Account_Class
)
datesDf<-data.frame(seq.Date(min(df$CalDate), max(df$CalDate), by = "days"))
names(datesDf) <-c("CalDate")
# Create Missing Records
CleanDataDf<-merge(merge(distinctAttributes,datesDf,all=TRUE),df,all=TRUE)
#replace Null by Zero
CleanDataDf[is.na(CleanDataDf)] <- 0
dfOriginal<-df
df<-CleanDataDf
finalDf<-data.frame()
mockDays<-0
for (row in 1:nrow(distinctAttributes)) {
#if(row = 1) {
print(paste(row,"Running for "
, distinctAttributes$MetricDesc   [row]
, distinctAttributes$LgcyCorp     [row]
, distinctAttributes$PSU          [row]
, distinctAttributes$Account_Class[row]
)
)
MetricDesc    <- distinctAttributes$MetricDesc   [row]
LgcyCorp      <- distinctAttributes$LgcyCorp     [row]
PSU           <- distinctAttributes$PSU          [row]
Account_Class <- distinctAttributes$Account_Class[row]
data<-df[df$MetricDesc == MetricDesc & df$LgcyCorp==LgcyCorp & df$PSU == PSU & df$Account_Class == Account_Class,]
par(mfrow = c(1,1))
data$Date <- as.Date(data$CalDate)
MinCalDate <- min(data$CalDate)
MaxCalDate <- max(data$CalDate)
## data$ma      <- movavg(data$Metric, 50, "s")
data$mean    <- mean (data$Metric)
data$sd      <- sd   (data$Metric)
data$Metric1 <- ifelse(data$Metric>data$mean+3*data$sd | data$Metric<data$mean-3*data$sd,data$mean,data$Metric)
## Forecasting with tbats
msts <- msts(data$Metric1,seasonal.periods = c(7,30,365),start = decimal_date(MinCalDate))
train <- window(msts,start=decimal_date(MinCalDate), end=decimal_date(MaxCalDate-mockDays-1))
#test <- window(msts, start=decimal_date(MaxCalDate-mockDays), end=decimal_date(MaxCalDate))
s <- tbats(train)
sp<- predict(s,h=33)
sp <- data.frame(sp)
sp$MetricDesc    <-MetricDesc
sp$LgcyCorp      <-LgcyCorp
sp$PSU           <-PSU
sp$Account_Class <-Account_Class
sp$Dates         <-round_date(date_decimal(as.numeric(row.names(sp))),"day")
finalDf <- rbind(finalDf,sp)
#break
}
toLoadCt<-nrow(finalDf)
print(paste(nrow(finalDf)," to be loaded!", sep=""))
getConnection<-function(ENV="DEV"){
if(ENV=="PRD"){
HOST='PROD'
# USER='$tdwallet(TDPR211_user)'
# PWD='$tdwallet(TDPR211_pw)'
TABLEDB="DLBIQuality"
VIEWDB=TABLEDB
print(paste('Connecting to ', HOST,sep=""))
ch<-odbcConnect(HOST, '$tdwallet(TDPR211_user)', '$tdwallet(TDPR211_pw)');
} else if(ENV=="UAT"){
HOST='TD_QA'
# USER="'$tdwallet(TDPR211_user)'"
# PWD="'$tdwallet(TDPR211_pw)'"
TABLEDB="XBIDQM"
VIEWDB=paste(TABLEDB,'V',sep='')
print(paste('Connecting to ', HOST,sep=""))
ch<-odbcConnect(HOST, '$tdwallet(CHTRT7_user)', '$tdwallet(CHTRT7_pw)');
} else if(ENV=="DEV"){
HOST='TD_DEV'
# USER="'$tdwallet(CHTRT9_user)'"
# PWD="'$tdwallet(CHTRT9_pw)'"
TABLEDB="XBIDQM"
VIEWDB=paste(TABLEDB,'V',sep='')
print(paste('Connecting to ', HOST,sep=""))
ch<-odbcConnect(HOST, '$tdwallet(CHTRT9_user)', '$tdwallet(CHTRT9_pw)');
}else{
return(NULL)
#stop("Environment must be DEV, UAT or PRD).")
}
return(ch)
}
ch<-getConnection(ENV)
if (ch == -1) stop(paste("Failed to login to ",HOST,sep=""))
sqlQuery(ch,paste("Delete from ",TABLEDB,".DQMRModelPrdctn All",sep=""))
#foreach (row = 1:nrow(finalDf)) %dopar% {
for (row in 1:nrow(finalDf)) {
MsrCaptrKey    <-row
MetricDesc     <-finalDf$MetricDesc    [row]
LgcyCorp       <-finalDf$LgcyCorp      [row]
PSU            <-finalDf$PSU           [row]
Lo95           <-finalDf$Lo.95         [row]
Hi95           <-finalDf$Hi.95         [row]
PointForecast  <-finalDf$Point.Forecast[row]
Lo80           <-finalDf$Lo.80         [row]
Hi80           <-finalDf$Hi.80         [row]
Account_Class  <-finalDf$Account_Class [row]
CalDate        <-finalDf$Dates         [row]
X<-paste("Insert into ",TABLEDB,".DQMRModelPrdctn(MsrCaptrKey, FcstdNum, LowrBound80Num, UprBound80Num, LowrBound95Num, UprBound95Num, MetricNm, Lvl1Nm, Lvl1Def, Lvl1Id, ReportDt) select "
,MsrCaptrKey  ,"  as MsrCaptrKey     , "
,PointForecast,"  as FcstdNum        , "
,Lo80         ,"  as LowrBound80Num  , "
,Hi80         ,"  as UprBound80Num   , "
,Lo95         ,"  as LowrBound95Num  , "
,Hi95         ,"  as UprBound95Num   , '"
,MetricDesc   ,"' as MetricNm        , '"
,LgcyCorp     ,"' as Lvl1Nm          , '"
,PSU          ,"' as Lvl1Def         , '"
,Account_Class,"' as Lvl1Id          , to_date('"
,CalDate,"','YYYY-MM-DD') as ReportDt"
, sep="")
sqlQuery(ch,X)
}
View(finalDf)
recordsLoadedCt<-sqlQuery(ch,paste("select count(*) from ",TABLEDB,".DQMRModelPrdctn",sep=""))
print(paste(recordsLoadedCt," records loaded!", sep=""))
install.packages(c("DT", "leaflet"))
library(shiny)
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
bb_data1<- read.csv("data/data_mod.csv")
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
runApp('E:/github/manojach87.github.io/shiny')
setwd("E:/github/manojach87.github.io/shiny")
bb_data1<- read.csv("data/data_mod.csv")
summary(bb_data1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
